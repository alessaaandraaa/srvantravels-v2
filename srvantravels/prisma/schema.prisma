generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Custom_Itinerary {
  custom_ID           Int               @id @default(autoincrement())
  is_made_by_customer Int?
  Itinerary           Itinerary         @relation(fields: [custom_ID], references: [itinerary_ID], onDelete: NoAction, onUpdate: NoAction, map: "Custom_Itinerary_ibfk_1")
  Person              Person?           @relation(fields: [is_made_by_customer], references: [person_ID], onDelete: NoAction, onUpdate: NoAction, map: "Custom_Itinerary_ibfk_2")
  Itinerary_Stops     Itinerary_Stops[]

  @@index([is_made_by_customer], map: "is_made_by_customer")
}

model Customer {
  customer_ID       Int
  payment_ID        Int
  number_of_PAX     Int?
  date_of_travel    DateTime?       @db.Date
  number_of_luggage Int?
  ID_Picture        Bytes?          @db.Blob
  Person            Person          @relation(fields: [customer_ID], references: [person_ID], onDelete: NoAction, onUpdate: NoAction, map: "Customer_ibfk_1")
  Payment           Payment         @relation(fields: [payment_ID], references: [payment_ID], onDelete: NoAction, onUpdate: NoAction, map: "Customer_ibfk_2")
  Order_Details     Order_Details[]
  Van               Van[]

  @@id([customer_ID, payment_ID])
  @@index([payment_ID], map: "payment_ID")
}

model Driver {
  driver_ID     Int             @id
  plate_number  String?         @db.VarChar(20)
  Availability  Boolean?        @default(false)
  Employee      Employee        @relation(fields: [driver_ID], references: [employee_ID], onDelete: NoAction, onUpdate: NoAction, map: "Driver_ibfk_1")
  Order_Details Order_Details[]
  Van           Van[]
}

model Employee {
  employee_ID Int      @id
  Driver      Driver?
  Person      Person   @relation(fields: [employee_ID], references: [person_ID], onDelete: NoAction, onUpdate: NoAction, map: "Employee_ibfk_1")
  Manager     Manager?
}

model Itinerary {
  itinerary_ID      Int                @id @default(autoincrement())
  price             Decimal?           @db.Decimal(10, 2)
  type              Itinerary_type
  Custom_Itinerary  Custom_Itinerary?
  Order_Details     Order_Details[]
  Package_Itinerary Package_Itinerary?
}

model Itinerary_Stops {
  stop_ID          Int               @id @default(autoincrement())
  custom_ID        Int?
  stop_order       Int?
  location_ID      Int?
  Custom_Itinerary Custom_Itinerary? @relation(fields: [custom_ID], references: [custom_ID], onDelete: NoAction, onUpdate: NoAction, map: "Itinerary_Stops_ibfk_1")
  Locations        Locations?        @relation(fields: [location_ID], references: [location_ID], onDelete: NoAction, onUpdate: NoAction, map: "Itinerary_Stops_ibfk_2")

  @@index([custom_ID], map: "custom_ID")
  @@index([location_ID], map: "location_ID")
}

model Locations {
  location_ID      Int               @id @default(autoincrement())
  location_name    String?           @db.VarChar(255)
  location_address String?           @db.VarChar(255)
  is_custom_made   Boolean?          @default(false)
  Itinerary_Stops  Itinerary_Stops[]
}

model Manager {
  manager_ID        Int                 @id
  Employee          Employee            @relation(fields: [manager_ID], references: [employee_ID], onDelete: NoAction, onUpdate: NoAction, map: "Manager_ibfk_1")
  Package_Itinerary Package_Itinerary[]
}

model Order_Details {
  order_ID            Int                   @id @default(autoincrement())
  customer_ID         Int?
  payment_ID          Int?
  driver_ID           Int?
  itinerary_ID        Int?
  number_of_PAX       Int?
  date_of_travel      DateTime?             @db.Date
  time_for_pickup     DateTime?             @db.Time(0)
  time_for_dropoff    DateTime?             @db.Time(0)
  date_of_transaction DateTime?             @default(now()) @db.DateTime(0)
  status              Order_Details_status? @default(PENDING)
  Customer            Customer?             @relation(fields: [customer_ID, payment_ID], references: [customer_ID, payment_ID], onDelete: NoAction, onUpdate: NoAction, map: "Order_Details_ibfk_1")
  Driver              Driver?               @relation(fields: [driver_ID], references: [driver_ID], onDelete: NoAction, onUpdate: NoAction, map: "Order_Details_ibfk_2")
  Itinerary           Itinerary?            @relation(fields: [itinerary_ID], references: [itinerary_ID], onDelete: NoAction, onUpdate: NoAction, map: "Order_Details_ibfk_3")

  @@index([customer_ID, payment_ID], map: "customer_ID")
  @@index([driver_ID], map: "driver_ID")
  @@index([itinerary_ID], map: "itinerary_ID")
}

model Package_Itinerary {
  package_ID         Int       @id @default(autoincrement())
  package_name       String?   @db.VarChar(255)
  inclusions         String?   @db.VarChar(1024)
  number_of_PAX      Int?
  route              String?   @db.VarChar(1024)
  description        String?   @db.VarChar(1024)
  is_made_by_manager Int?
  is_available       Boolean?  @default(false)
  package_picture    String?   @db.VarChar(255)
  Itinerary          Itinerary @relation(fields: [package_ID], references: [itinerary_ID], onDelete: NoAction, onUpdate: NoAction, map: "Package_Itinerary_ibfk_1")
  Manager            Manager?  @relation(fields: [is_made_by_manager], references: [manager_ID], onDelete: NoAction, onUpdate: NoAction, map: "Package_Itinerary_ibfk_2")

  @@index([is_made_by_manager], map: "is_made_by_manager")
}

model Payment {
  payment_ID     Int                    @id @default(autoincrement())
  payment_method Payment_payment_method
  down_payment   Decimal?               @db.Decimal(10, 2)
  payment_status Payment_payment_status
  Customer       Customer[]
}

model Person {
  person_ID        Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  password         String?            @db.VarChar(255)
  email            String?            @unique(map: "email") @db.VarChar(255)
  contact_number   String?            @unique(map: "contact_number") @db.VarChar(12)
  Custom_Itinerary Custom_Itinerary[]
  Customer         Customer[]
  Employee         Employee?
}

model Van {
  plate_number       String    @id @db.VarChar(20)
  driver_ID          Int?
  customer_ID        Int?
  payment_ID         Int?
  passenger_capacity Int?
  Driver             Driver?   @relation(fields: [driver_ID], references: [driver_ID], onDelete: NoAction, onUpdate: NoAction, map: "Van_ibfk_1")
  Customer           Customer? @relation(fields: [customer_ID, payment_ID], references: [customer_ID, payment_ID], onDelete: NoAction, onUpdate: NoAction, map: "Van_ibfk_2")

  @@index([customer_ID, payment_ID], map: "customer_ID")
  @@index([driver_ID], map: "driver_ID")
}

enum Payment_payment_method {
  CASH
  GCASH
}

enum Itinerary_type {
  PACKAGE
  CUSTOM
}

enum Payment_payment_status {
  FULLY_PAID     @map("FULLY PAID")
  PARTIALLY_PAID @map("PARTIALLY PAID")
  NOT_PAID       @map("NOT PAID")
}

enum Order_Details_status {
  ACCEPTED
  REJECTED
  IN_MODIFICATION @map("IN MODIFICATION")
  PENDING
}
